// <auto-generated />
using System;
using MatchTickets.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatchTickets.Infraestructure.Migrations
{
    [DbContext(typeof(DbContextCR))]
    partial class DbContextCRModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("MatchTickets.Domain.Entities.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("FoundationOfTheClub")
                        .HasColumnType("TEXT");

                    b.Property<int>("StadiumCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ubication")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClubId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.MembershipCard", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DischargeDate")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MembershipCardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Plan")
                        .HasColumnType("INTEGER");

                    b.HasKey("MembershipId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("ClubId");

                    b.ToTable("MembershipCards", (string)null);
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.SoccerMatch", b =>
                {
                    b.Property<int>("SoccerMatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DayOfTheMatch")
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberTicketsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TimeOfTheMatch")
                        .HasColumnType("TEXT");

                    b.HasKey("SoccerMatchId");

                    b.HasIndex("ClubId");

                    b.ToTable("SoccerMatches", (string)null);
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sector")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SoccerMatchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TicketId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SoccerMatchId");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("UserType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.Admin", b =>
                {
                    b.HasBaseType("MatchTickets.Domain.Entities.User");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.Client", b =>
                {
                    b.HasBaseType("MatchTickets.Domain.Entities.User");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dni")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipCardID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.MembershipCard", b =>
                {
                    b.HasOne("MatchTickets.Domain.Entities.Client", "Client")
                        .WithOne("MembershipCard")
                        .HasForeignKey("MatchTickets.Domain.Entities.MembershipCard", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchTickets.Domain.Entities.Club", "Club")
                        .WithMany("MembershipCards")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.SoccerMatch", b =>
                {
                    b.HasOne("MatchTickets.Domain.Entities.Club", "Club")
                        .WithMany("SoccerMatches")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("MatchTickets.Domain.Entities.Client", "Client")
                        .WithMany("Tickets")
                        .HasForeignKey("ClientId");

                    b.HasOne("MatchTickets.Domain.Entities.SoccerMatch", "SoccerMatch")
                        .WithMany("Tickets")
                        .HasForeignKey("SoccerMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("SoccerMatch");
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.User", b =>
                {
                    b.OwnsOne("MatchTickets.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.Club", b =>
                {
                    b.Navigation("MembershipCards");

                    b.Navigation("SoccerMatches");
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.SoccerMatch", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("MatchTickets.Domain.Entities.Client", b =>
                {
                    b.Navigation("MembershipCard");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
